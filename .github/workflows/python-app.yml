# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
    tags: [ v3.* ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5

    - name: Install dependencies
      run: |
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install git+https://github.com/OpenNingia/l5rcm-data-access.git@master
        pip install --no-deps ./l5r
        sudo apt-get install -y libxml2-dev libxslt1-dev librsvg2-bin fakeroot 
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Make debian package
      id: make_package
      run: |
        cd tools/deploy/linux
        ./makedeb.sh
        echo "RELEASE_PKG_FILE=tools/deploy/linux/$(ls *.deb)" >> $GITHUB_ENV
    - name: Create Release
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: false
    - name: Upload Release Asset
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.RELEASE_PKG_FILE }}
        asset_name: l5r-character-manager.deb
        asset_content_type: application/zip